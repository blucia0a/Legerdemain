Legerdemain - Brandon Lucia - 2011

A debugger focused on instrumenting programs, replacing/wrapping functions, and
monitoring/collecting information at runtime.  To use LDM plugins
(like scaley_LDM.so), you need to LD_PRELOAD libldm.so and scaley_LDM.so by
setting LD_PRELOAD=<path>/libldm.so:<path>/scaley_LDM.so in your environment.

scaley_LDM.so shows how to use LDM macros to instrument a function call (read,
in this example) with your version.  It shows how to call the original as well.

libldm.so does/will implement management and instrumentation.  ldm.sh <your
program> will run your program, load your plugins, and provide debugging
support, should you receive any fatal signals.

libdwarfclient is used by libldm to access dwarf information in elf program
binaries.  dwarfinfo is a standalone program that can be used to access
dwarf debugging information from the the command line.  It is primarily 
useful in 3 ways right now.
1)using options -g -e<executable> -f<source file> -l<source line> it will show the 
  instruction address of the specified file and line
2)adding the -c option to the command line in 1), information about the compilation
  unit in which the code point resides will be printed
3)using the -p option dumps all the dwarf debug information in the binary



/********************************/
Notes:
This project is changing!
There is support being added for debugging.  Presently, on receiving SIGINT,
ABRT, SEGV, or TERM control falls to the LDM debugger.  Using a version of
addr2line, the binutils program, I've added support for providing file:line
(function) information up the call stack.


/********************************/
TODO:
Generalize thread constructors -- the user should be able to provide a chain of constructors in the LDM_TCTR variable, that will be applied in sequence.

Add support for inspecting data, inspecting arbitrary code, and
jumping around the call stack to look at params, locals, etc.

Add support for user defined watchpoints, via drprobe (github.com/blucia0a/drprobe).

Add support for generic instrumentation (non function call based)

Add support for plugins to stream tasks to LDM data aggregation thread
